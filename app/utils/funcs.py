import os
import shutil
import asyncio
import aiofiles.os as aio_os
from datetime import datetime, timedelta, timezone

from loguru import logger
from app.models import DownloadHistory, DownloadStatus
from app.utils.constants import CLEANUP_THRESHOLD, TARGET_USAGE_DISK, DISK_CLEANUP_INTERVAL, MOSCOW_TZ


def format_file_size(total_size: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if total_size > 1024 * 1024 * 1024:
        return f"{total_size / (1024 * 1024 * 1024):.1f} –ì–ë"
    elif total_size > 1024 * 1024:
        return f"{total_size / (1024 * 1024):.1f} –ú–ë"
    elif total_size > 1024:
        return f"{total_size / 1024:.1f} –ö–ë"
    else:
        return f"{total_size} –ë"


def format_duration(seconds: int) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–∫—É–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°
    """
    if not isinstance(seconds, int) or seconds < 0:
        return "0:00"

    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60

    if hours > 0:
        return f"{hours}:{minutes:02d}:{seconds:02d}"
    else:
        return f"{minutes}:{seconds:02d}"


async def cleanup_old_files(disk_path: str = "/") -> int:
    """
    –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –¥–∏—Å–∫–∞.
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    total, used, free = await async_disk_usage("/")
    current_usage_percent = (used / total) * 100

    if current_usage_percent < CLEANUP_THRESHOLD:
        logger.info(
            f"–û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {current_usage_percent:.1f}% "
            f"(–ø–æ—Ä–æ–≥: {CLEANUP_THRESHOLD}%, —Å–≤–æ–±–æ–¥–Ω–æ: {free / (1024 ** 3):.1f} GB)"
        )
        return 0

    logger.warning(f"–ü–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏—Å–∫–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {current_usage_percent:.1f}%")
    cleaned_count = 0
    target_bytes = total * (TARGET_USAGE_DISK / 100)
    bytes_to_free = used - target_bytes

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ first)
    old_downloads = await DownloadHistory.filter(
        status=DownloadStatus.COMPLETED,
        file_path__not_isnull=True,
    ).order_by("completed_at")

    for download in old_downloads:
        if bytes_to_free <= 0:
            break

        try:
            if download.file_path and await aio_os.path.exists(download.file_path):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                file_size = await aio_os.path.getsize(download.file_path)

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                await aio_os.remove(download.file_path)
                bytes_to_free -= file_size
                cleaned_count += 1

                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É
                parent_dir = os.path.dirname(download.file_path)
                if await aio_os.path.exists(parent_dir) and not await aio_os.listdir(parent_dir):
                    await aio_os.rmdir(parent_dir)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
                download.file_path = None
                await download.save(update_fields=["file_path"])

                logger.debug(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª {download.file_path} ({file_size} bytes)")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {download.file_path}: {e}")
            continue

    # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total, used, free = shutil.disk_usage(disk_path)
    final_usage_percent = (used / total) * 100

    logger.info(
        f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {cleaned_count} —Ñ–∞–π–ª–æ–≤. "
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {final_usage_percent:.1f}%"
    )

    return cleaned_count


async def async_disk_usage(path: str = "/") -> tuple:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, shutil.disk_usage, path)


async def cleanup_scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—Å—Ç–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∞—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    while True:
        try:
            await cleanup_old_files()
            await asyncio.sleep(DISK_CLEANUP_INTERVAL)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(DISK_CLEANUP_INTERVAL)


async def generate_stats_file(yesterday: datetime.date) -> tuple[str, dict, int]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    yesterday_start = datetime.combine(yesterday, datetime.min.time())
    yesterday_end = datetime.combine(yesterday + timedelta(days=1), datetime.min.time())

    user_stats = await DownloadHistory.filter(
        created_at__gte=yesterday_start,
        created_at__lt=yesterday_end
    ).prefetch_related("user")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    user_downloads = {}
    for download in user_stats:
        user_id = download.user.id if download.user else "–ê–Ω–æ–Ω–∏–º"
        username = f"@{download.user.username}" if download.user and download.user.username else "–ë–µ–∑ username"
        full_name = download.user.full_name if download.user else "–ê–Ω–æ–Ω–∏–º"

        if user_id not in user_downloads:
            user_downloads[user_id] = {
                "username": username,
                "full_name": full_name,
                "total": 0,
                "completed": 0,
                "failed": 0
            }

        user_downloads[user_id]["total"] += 1
        if download.status == DownloadStatus.COMPLETED:
            user_downloads[user_id]["completed"] += 1
        elif download.status == DownloadStatus.FAILED:
            user_downloads[user_id]["failed"] += 1

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    text_content = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ô –ó–ê {yesterday.strftime('%d.%m.%Y')}\n"
    text_content += "=" * 50 + "\n\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫–∞—á–∏–≤–∞–Ω–∏–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
    sorted_users = sorted(user_downloads.items(), key=lambda x: x[1]["total"], reverse=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    text_content += "üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
    text_content += "-" * 30 + "\n"

    for i, (user_id, stats) in enumerate(sorted_users, 1):
        success_rate = (stats["completed"] / stats["total"] * 100) if stats["total"] > 0 else 0
        text_content += f"{i}. {stats['full_name']} ({stats['username']})\n"
        text_content += f"   üì• –í—Å–µ–≥–æ: {stats['total']} | ‚úÖ –£—Å–ø–µ—à–Ω–æ: {stats['completed']} | ‚ùå –û—à–∏–±–æ–∫: {stats['failed']}\n"
        text_content += f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_downloads = sum(stats["total"] for stats in user_downloads.values())
    total_completed = sum(stats["completed"] for stats in user_downloads.values())
    total_failed = sum(stats["failed"] for stats in user_downloads.values())
    overall_success_rate = (total_completed / total_downloads * 100) if total_downloads > 0 else 0

    text_content += "üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
    text_content += "-" * 30 + "\n"
    text_content += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_downloads)}\n"
    text_content += f"‚Ä¢ –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {total_downloads}\n"
    text_content += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {total_completed}\n"
    text_content += f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {total_failed}\n"
    text_content += f"‚Ä¢ –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overall_success_rate:.1f}%\n\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text_content += "üí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:\n"
    text_content += "-" * 30 + "\n"
    text_content += "‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Ç–µ, –∫—Ç–æ –Ω–∞—á–∞–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n  –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ\n"
    text_content += "‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö\n  —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –∫ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ø—ã—Ç–æ–∫\n"
    text_content += f"‚Ä¢ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {yesterday.strftime('%d.%m.%Y')}"

    return text_content, user_downloads, total_downloads


def get_moscow_time() -> datetime:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    return datetime.now(MOSCOW_TZ)
